{"version":3,"sources":["_services/workflow.service.ts","LoginPage/LoginPage.tsx","Header/Header.tsx","ToolsMenu/ToolsMenu.tsx","WorkflowModal/WorkflowModal.tsx","WorkflowCard/WorkflowCard.tsx","WorkFlowHome/WorkFlowHome.tsx","NodeCard/NodeCard.tsx","Page404/Page404.js","NodesPage/NodesPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getUser","user","localStorage","getItem","JSON","parse","storeData","data","setItem","stringify","getData","withRouter","props","useForm","handleSubmit","errors","control","useState","showError","changeErrorState","Container","className","Row","Col","md","lg","sm","Card","Body","noValidate","xs","as","Form","Group","InputGroup","Prepend","Text","Control","placeholder","isInvalid","email","Feedback","type","message","rules","required","value","pattern","name","defaultValue","password","Check","label","Button","onClick","history","push","Alert","variant","Navbar","bg","expand","to","Brand","color","removeItem","ToolsMenu","leftProps","rightProps","WorkflowModal","Modal","show","onHide","Header","Title","Label","workflowName","Footer","onSubmit","WorkflowCard","showDelete","changeDelete","index","onMouseOver","onMouseLeave","style","zIndex","event","deleteWorkflow","title","state","onStateChange","isCompleted","WorkFlowHome","showModal","filter","search","createWorkspace","setState","storeWorkflow","newWorkflow","id","Date","getTime","nodes","onChange","target","changeFilter","preventDefault","splice","window","alert","this","DropdownButton","Dropdown","Item","map","d","length","find","node","indexOf","match","RegExp","key","Component","NodeCard","width","stateChange","rows","desc","Page404","NodesPage","params","saveData","i","workflows","shuffleNodes","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","deleteNode","confirm","pop","addNode","onNodeChange","overflow","createBrowserHistory","PublicRoute","children","rest","render","pathname","PrivateRoute","App","StrictMode","path","exact","from","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6cbbb57e.chunk.js","sourcesContent":["/**\n * Store user in local storage\n * @param {any} user user data to store in local storage\n */\nconst storeUser = (user: any) => {\n  localStorage.setItem(\"user\", JSON.stringify(user));\n};\n\n/**\n * Get user from local storage\n */\nconst getUser: any = () => {\n  const user = localStorage.getItem(\"user\");\n  if (user) {\n    return JSON.parse(user);\n  }\n  return null;\n};\n\n/**\n * Remove current user local storage\n */\nconst removeUser: any = () => {\n  localStorage.removeItem(\"user\");\n};\n\n/**\n * Store workflow data in local storage\n * @param {any} data workflow data to store\n */\nconst storeData = (data: any) => {\n  localStorage.setItem(\"data\", JSON.stringify(data));\n};\n\n/**\n * Get workflow data from local storage\n */\nconst getData: any = () => {\n  const data = localStorage.getItem(\"data\");\n  if (data) {\n    return JSON.parse(data);\n  }\n  return [];\n};\n\nexport { storeUser, getUser, removeUser, storeData, getData };\n","import React, { useState } from \"react\";\nimport {\n  Row,\n  Col,\n  Container,\n  Card,\n  Button,\n  Form,\n  InputGroup,\n  Alert\n} from \"react-bootstrap\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { FaEnvelope, FaKey } from \"react-icons/fa\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { storeUser } from \"../_services/workflow.service\";\n\ntype Props = {\n  history: any;\n};\n\nconst LoginPage = (props: Props) => {\n  const { handleSubmit, errors, control } = useForm();\n  const [showError, changeErrorState] = useState(false);\n  const onLogin = (data: any) => {\n    if (\n      data.email === \"khushilkhatri@gmail.com\" &&\n      data.password === \"1234567890\"\n    ) {\n      storeUser(data);\n      changeErrorState(false);\n      props.history.push(\"/\");\n    } else {\n      changeErrorState(true);\n    }\n  };\n\n  return (\n    <>\n      <Container className=\"vh-100\">\n        <Row className=\"position-relative box-center\">\n          <Col md={6} lg={6} sm={12} className=\"mx-auto vertical\">\n            <Card className=\"shadow-lg\">\n              <Card.Body>\n                <Row>\n                  <Container className=\"text-center\">\n                    <strong>Login</strong>\n                  </Container>\n                  <form noValidate className=\"w-100\">\n                    <Col md={12} lg={12} xs={12}>\n                      <Controller\n                        as={\n                          <Form.Group>\n                            <InputGroup className=\"input-group-custom w-100 my-4\">\n                              <InputGroup.Prepend>\n                                <InputGroup.Text className={\"input-prepend\"}>\n                                  <FaEnvelope />\n                                </InputGroup.Text>\n                              </InputGroup.Prepend>\n                              <Form.Control\n                                placeholder=\"Email\"\n                                isInvalid={errors.email}\n                              />\n                              <Form.Control.Feedback type=\"invalid\">\n                                {errors.email && errors.email.message}\n                              </Form.Control.Feedback>\n                            </InputGroup>\n                          </Form.Group>\n                        }\n                        rules={{\n                          required: {\n                            value: true,\n                            message: \"Email field is required.\"\n                          },\n                          pattern: {\n                            // eslint-disable-next-line\n                            value: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                            message: \"Email format is invalid.\"\n                          }\n                        }}\n                        control={control}\n                        name=\"email\"\n                        defaultValue=\"\"\n                      ></Controller>\n                    </Col>\n                    <Col md={12} lg={12} xs={12}>\n                      <Controller\n                        as={\n                          <InputGroup className=\"input-group-custom w-100 my-4\">\n                            <InputGroup.Prepend>\n                              <InputGroup.Text className=\"input-prepend\">\n                                <FaKey />\n                              </InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <Form.Control\n                              type=\"password\"\n                              placeholder=\"Password\"\n                              isInvalid={errors.password}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                              {errors.password && errors.password.message}\n                            </Form.Control.Feedback>\n                          </InputGroup>\n                        }\n                        rules={{\n                          required: {\n                            value: true,\n                            message: \"Password field is required.\"\n                          }\n                        }}\n                        control={control}\n                        name=\"password\"\n                        defaultValue=\"\"\n                      ></Controller>\n                    </Col>\n                    <Col md={12} lg={12} xs={12}>\n                      <Form.Check type=\"checkbox\" label=\"Remember me\" />\n                    </Col>\n                    <Col md={12} lg={12} xs={12}>\n                      <Button\n                        className=\"w-100 my-4\"\n                        onClick={handleSubmit(onLogin)}\n                      >\n                        Login\n                      </Button>\n                    </Col>\n                  </form>\n                  {showError && (\n                    <Col md={12} lg={12} xs={12}>\n                      <Alert variant=\"danger\">\n                        Email or Password is invalid.\n                      </Alert>\n                    </Col>\n                  )}\n                </Row>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default withRouter(LoginPage);\n","import React from \"react\";\nimport { Navbar, Button } from \"react-bootstrap\";\nimport { withRouter, Link } from \"react-router-dom\";\n\nimport { removeUser } from \"../_services/workflow.service\";\n\ntype Props = {\n  history: any;\n};\n\nconst Header = (props: Props) => {\n  const onLogout = () => {\n    removeUser();\n    props.history.push(\"/login\");\n  };\n  return (\n    <>\n      <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\">\n        <Link to=\"/\">\n          <Navbar.Brand color=\"light\">Workflow</Navbar.Brand>\n        </Link>\n        <Button className=\"ml-auto\" variant=\"outline-light\" onClick={onLogout}>\n          Logout\n        </Button>\n      </Navbar>\n    </>\n  );\n};\n\nexport default withRouter(Header);\n","import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\n\ntype Props = {\n  leftProps: any;\n  rightProps: any;\n};\n\nconst ToolsMenu = (props: Props) => {\n  return (\n    <>\n      <Row className=\"py-3 px-4 border-bottom boder\">\n        <Col md={6} lg={6} sm={12}>\n          {props.leftProps}\n        </Col>\n        <Col md={6} lg={6} sm={12}>\n          {props.rightProps}\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default ToolsMenu;\n","import React from \"react\";\nimport { Modal, Button, Form } from \"react-bootstrap\";\nimport { useForm, Controller } from \"react-hook-form\";\n\ntype Props = {\n  onSubmit: any;\n  onHide: any;\n  show: boolean;\n};\n\nconst WorkflowModal = (props: Props) => {\n  const { handleSubmit, control, errors } = useForm();\n  const onSubmit = (data: any) => {\n    props.onSubmit(data);\n  };\n  return (\n    <Modal show={props.show} onHide={() => props.onHide()}>\n      <Modal.Header>\n        <Modal.Title>Add Workflow</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form.Group>\n          <Form.Label>Workflow Name</Form.Label>\n          <Controller\n            as={\n              <Form.Control\n                name=\"workflowName\"\n                isInvalid={errors.workflowName}\n              ></Form.Control>\n            }\n            name=\"workflowName\"\n            rules={{\n              required: {\n                value: true,\n                message: \"Workflow name is required.\"\n              }\n            }}\n            control={control}\n            defaultValue=\"\"\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {errors.workflowName && errors.workflowName.message}\n          </Form.Control.Feedback>\n        </Form.Group>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={() => props.onHide()}>\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit(onSubmit)}>Save</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default WorkflowModal;\n","import React, { useState } from \"react\";\nimport { Col, Card, Form, Button } from \"react-bootstrap\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { Link } from \"react-router-dom\";\nimport { FaTrash } from \"react-icons/fa\";\n\ntype Props = {\n  index: number;\n  data: any;\n  isCompleted: boolean;\n  deleteWorkflow: any;\n  onStateChange: any;\n};\n\nconst WorkflowCard = (props: Props) => {\n  const [showDelete, changeDelete] = useState(false);\n  return (\n    <Col md={3} lg={3} sm={12} className=\"mt-4\">\n      <Link\n        to={\"/nodes/\" + props.index}\n        className=\"text-decoration-none text-dark\"\n      >\n        <Card\n          onMouseOver={() => changeDelete(true)}\n          onMouseLeave={() => changeDelete(false)}\n        >\n          {showDelete && (\n            <Button\n              className=\"float-button\"\n              variant=\"danger\"\n              style={{ zIndex: 10 }}\n              onClick={(event: any) => props.deleteWorkflow(event, props.index)}\n              onMouseLeave={() => changeDelete(false)}\n            >\n              <FaTrash />\n            </Button>\n          )}\n          <Card.Body>\n            <Form.Label className=\"border title-border\">\n              {props.data.title}\n            </Form.Label>\n            <div className=\"pt-3\">\n              <h5 className=\"d-inline\">\n                {props.data.state === \"completed\" ? \"Completed\" : \"Pending\"}\n              </h5>\n              <Button\n                className=\"pull-right rounded-circle\"\n                variant={\n                  props.data.state === \"completed\" ? \"success\" : \"secondary\"\n                }\n                onClick={(event: any) =>\n                  props.onStateChange(event, props.isCompleted, props.index)\n                }\n              >\n                <FaCheck />\n              </Button>\n            </div>\n          </Card.Body>\n        </Card>\n      </Link>\n    </Col>\n  );\n};\n\nexport default WorkflowCard;\n","import React, { Component } from \"react\";\nimport {\n  Row,\n  Col,\n  DropdownButton,\n  Dropdown,\n  Button,\n  Form\n} from \"react-bootstrap\";\n\nimport Header from \"../Header\";\nimport ToolsMenu from \"../ToolsMenu\";\nimport { getData, storeData } from \"../_services/workflow.service\";\nimport WorkflowModal from \"../WorkflowModal\";\nimport WorkflowCard from \"../WorkflowCard\";\n\ntype State = {\n  showModal: boolean;\n  data: Array<any>;\n  filter: string;\n  search: string;\n};\n\ntype Props = {};\n\nclass WorkFlowHome extends Component<Props, State> {\n  state: State = {\n    showModal: false,\n    data: getData(),\n    filter: \"All\",\n    search: \"\"\n  };\n\n  createWorkspace = () => {\n    this.setState({\n      showModal: true\n    });\n  };\n\n  storeWorkflow = (workflowName: any) => {\n    const { data } = this.state;\n    const newWorkflow = {\n      id: new Date().getTime(),\n      title: workflowName.workflowName,\n      state: \"pending\",\n      nodes: []\n    };\n    data.push(newWorkflow);\n    this.setState({ data, showModal: false });\n    storeData(data);\n  };\n\n  onHide = () => {\n    this.setState({\n      showModal: false\n    });\n  };\n\n  onChange = (event: any) => {\n    this.setState({\n      search: event.target.value\n    });\n  };\n\n  changeFilter = (filter: string) => {\n    this.setState({\n      filter: filter\n    });\n  };\n\n  deleteWorkflow = (event: any, index: number) => {\n    event.preventDefault();\n    const { data } = this.state;\n    data.splice(index, 1);\n    this.setState({ data });\n    storeData(data);\n  };\n\n  onStateChange = (event: any, isCompleted: string, index: number) => {\n    const { data } = this.state;\n    event.preventDefault();\n    if (!isCompleted) {\n      return window.alert(\"Nodes may not completed or nodes not available.\");\n    }\n    data[index].state =\n      data[index].state === \"completed\" ? \"pending\" : \"completed\";\n    this.setState({ data });\n  };\n\n  render() {\n    const { showModal, data, filter, search } = this.state;\n    return (\n      <>\n        <Header />\n        <ToolsMenu\n          leftProps={\n            <Row>\n              <Col md={8} lg={8} sm={12}>\n                <Form.Control\n                  name=\"search\"\n                  value={search}\n                  onChange={this.onChange}\n                ></Form.Control>\n              </Col>\n              <Col md={4} lg={4} sm={12}>\n                <DropdownButton\n                  title={\"Filter: \" + filter}\n                  id=\"filter-dropdown\"\n                >\n                  <Dropdown.Item onClick={() => this.changeFilter(\"All\")}>\n                    All\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => this.changeFilter(\"Completed\")}>\n                    Completed\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => this.changeFilter(\"Pending\")}>\n                    Pending\n                  </Dropdown.Item>\n                </DropdownButton>\n              </Col>\n            </Row>\n          }\n          rightProps={\n            <Button\n              variant=\"success\"\n              className=\"pull-right\"\n              onClick={this.createWorkspace}\n            >\n              + Create Workflow\n            </Button>\n          }\n        />\n        <Row className=\"px-3\">\n          {data.map((d: any, index: number) => {\n            let isCompleted = false;\n            if (d.nodes.length) {\n              let result = d.nodes.find(\n                (node: any) =>\n                  [\"pending\", \"in-progress\"].indexOf(node.state) !== -1\n              );\n              isCompleted = !result;\n            }\n            if (\n              (filter === \"Completed\" && d.state === \"pending\") ||\n              (filter === \"Pending\" && d.state === \"completed\") ||\n              !d.title.match(RegExp(search, \"i\"))\n            ) {\n              return null;\n            }\n            return (\n              <WorkflowCard\n                isCompleted={isCompleted}\n                deleteWorkflow={this.deleteWorkflow}\n                key={index}\n                index={index}\n                onStateChange={this.onStateChange}\n                data={d}\n              />\n            );\n          })}\n        </Row>\n        <WorkflowModal\n          show={showModal}\n          onHide={this.onHide}\n          onSubmit={this.storeWorkflow}\n        />\n      </>\n    );\n  }\n}\n\nexport default WorkFlowHome;\n","import React from \"react\";\nimport { Card, Form, Button } from \"react-bootstrap\";\nimport { FaCheck } from \"react-icons/fa\";\n\ntype Props = {\n  data: any;\n  stateChange: any;\n  index: number;\n  onChange: any;\n};\n\nconst NodeCard = (props: Props) => {\n  let state: string = \"secondary\";\n  switch (props.data.state) {\n    case \"in-progress\":\n      state = \"primary\";\n      break;\n    case \"completed\":\n      state = \"success\";\n      break;\n    default:\n      break;\n  }\n  return (\n    <div\n      className=\"my-4 pull-left ml-4 d-inline-block shadow\"\n      style={{ width: \"300px\" }}\n    >\n      <Card>\n        <Button\n          className=\"float-button\"\n          variant={state}\n          onClick={() => props.stateChange(props.index, props.data.state)}\n        >\n          <FaCheck />\n        </Button>\n        <Card.Body>\n          <Form.Group>\n            <Form.Control\n              name=\"title\"\n              value={props.data.title}\n              isInvalid={props.data.title === \"\"}\n              onChange={event => props.onChange(event, props.index)}\n            ></Form.Control>\n            <Form.Control.Feedback type=\"invalid\">\n              Node title required.\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group>\n            <Form.Control\n              as=\"textarea\"\n              name=\"desc\"\n              rows={18}\n              value={props.data.desc}\n              isInvalid={props.data.desc === \"\"}\n              onChange={event => props.onChange(event, props.index)}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              Node description required.\n            </Form.Control.Feedback>\n          </Form.Group>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default NodeCard;\n","import React, { Component } from 'react';\n\nclass Page404 extends Component {\n  render() {\n    return <div>Page404</div>;\n  }\n}\n\nexport default Page404;\n","import React, { Component } from \"react\";\nimport { Row, Col, Button, Form } from \"react-bootstrap\";\nimport { withRouter } from \"react-router-dom\";\n\nimport Header from \"../Header\";\nimport ToolsMenu from \"../ToolsMenu\";\nimport { getData, storeData } from \"../_services/workflow.service\";\nimport NodeCard from \"../NodeCard\";\nimport Page404 from \"../Page404\";\n\ntype State = {\n  search: string;\n  data: any;\n};\n\ntype Props = {\n  match: any;\n};\n\nclass NodesPage extends Component<Props, State> {\n  state: State = {\n    search: \"\",\n    data: getData()[this.props.match.params.id]\n  };\n\n  saveData = () => {\n    const { data } = this.state;\n    for (let i = 0; i < data.nodes.length; i++) {\n      if (data.nodes[i].title === \"\" || data.nodes[i].desc === \"\") {\n        return window.alert(\"Field Validation Error.\");\n      }\n    }\n    if (data.title === \"\") {\n      return window.alert(\"Field Validation Error.\");\n    }\n    const workflows = getData();\n    workflows[this.props.match.params.id] = data;\n    storeData(workflows);\n    window.alert(\"Workflow Saved\");\n  };\n\n  onChange = (event: any) => {\n    const { data } = this.state;\n    data.title = event.target.value;\n    this.setState({\n      data\n    });\n  };\n\n  shuffleNodes = () => {\n    const { data } = this.state;\n    let isCompleted = false;\n    if (data.nodes.length) {\n      let result = data.nodes.find(\n        (node: any) => [\"pending\", \"in-progress\"].indexOf(node.state) !== -1\n      );\n      isCompleted = !result;\n    }\n    if (!isCompleted) {\n      return window.alert(\n        \"Nodes are not in complete state shuffle not possible.\"\n      );\n    }\n    data.nodes = this.shuffle(data.nodes);\n    this.setState({\n      data\n    });\n  };\n\n  shuffle = (array: Array<any>) => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n  deleteNode = () => {\n    const { data } = this.state;\n    if (data.nodes.length === 0) {\n      return window.alert(\"No Nodes Available\");\n    }\n    if (window.confirm(\"Are you sure?\")) {\n      data.nodes.pop();\n      this.setState({\n        data\n      });\n    }\n  };\n\n  addNode = () => {\n    const { data } = this.state;\n    data.nodes.push({\n      title: \"New Task\",\n      desc: \"Add your description\",\n      state: \"pending\"\n    });\n    this.setState({\n      data\n    });\n  };\n\n  onNodeChange = (event: any, index: number) => {\n    const { data } = this.state;\n    data.nodes[index][event.target.name] = event.target.value;\n    this.setState({\n      data\n    });\n  };\n\n  stateChange = (index: number, state: string) => {\n    const { data } = this.state;\n    if (index === 0 || data.nodes[index - 1][\"state\"] === \"completed\") {\n      switch (state) {\n        case \"in-progress\":\n          state = \"completed\";\n          break;\n        case \"pending\":\n          state = \"in-progress\";\n          break;\n        default:\n          break;\n      }\n      data.nodes[index][\"state\"] = state;\n      this.setState({\n        data\n      });\n      const workflows = getData();\n      workflows[this.props.match.params.id] = data;\n      storeData(workflows);\n    } else {\n      window.alert(\n        \"Node state only can change if previous node state is completed\"\n      );\n    }\n  };\n\n  render() {\n    const { data } = this.state;\n    if (!data) {\n      return <Page404 />;\n    }\n    return (\n      <>\n        <Header />\n        <ToolsMenu\n          leftProps={\n            <Row>\n              <Col md={6} lg={6} sm={12}>\n                <Form.Group>\n                  <Form.Control\n                    name=\"search\"\n                    value={data.title}\n                    onChange={this.onChange}\n                    isInvalid={data.title === \"\"}\n                  ></Form.Control>\n                  <Form.Control.Feedback type=\"invalid\">\n                    Workflow name required.\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Col>\n              <Col md={6} lg={6} sm={12}>\n                <p>\n                  Notes: Click on save to store current workflow and node data.\n                </p>\n              </Col>\n            </Row>\n          }\n          rightProps={\n            <div className=\"pull-right\">\n              <Button\n                variant=\"primary\"\n                className=\"ml-2\"\n                onClick={this.shuffleNodes}\n              >\n                Shuffle\n              </Button>\n              <Button\n                variant=\"danger\"\n                className=\"ml-2\"\n                onClick={this.deleteNode}\n              >\n                Delete\n              </Button>\n              <Button variant=\"success\" className=\"ml-2\" onClick={this.addNode}>\n                Add\n              </Button>\n              <Button variant=\"info\" className=\"ml-2\" onClick={this.saveData}>\n                Save\n              </Button>\n            </div>\n          }\n        />\n        <div style={{ overflow: \"auto\" }}>\n          <Row className=\"px-3\" style={{ width: \"max-content\" }}>\n            {data.nodes.map((d: any, index: number) => (\n              <NodeCard\n                key={index}\n                data={d}\n                stateChange={this.stateChange}\n                index={index}\n                onChange={this.onNodeChange}\n              ></NodeCard>\n            ))}\n          </Row>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default withRouter(NodesPage);\n","import React from \"react\";\nimport { Route, Redirect, Router, Switch } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nimport \"./App.scss\";\nimport { getUser } from \"./_services/workflow.service\";\nimport LoginPage from \"./LoginPage\";\nimport WorkflowHome from \"./WorkFlowHome\";\nimport NodesPage from \"./NodesPage\";\n\nconst history = createBrowserHistory();\n\nfunction App() {\n  return (\n    <React.StrictMode>\n      <Router history={history}>\n        <Switch>\n          <PublicRoute path={\"/login\"} exact={true}>\n            <LoginPage />\n          </PublicRoute>\n          <PrivateRoute path={\"/\"} exact={true}>\n            <WorkflowHome />\n          </PrivateRoute>\n          <PrivateRoute path={\"/nodes/:id\"} exact={true}>\n            <NodesPage />\n          </PrivateRoute>\n          <Redirect from={\"*\"} to=\"/login\"></Redirect>\n          {/* <Route component={Error404} /> */}\n        </Switch>\n      </Router>\n    </React.StrictMode>\n  );\n}\n\nfunction PublicRoute({ children, ...rest }: any) {\n  return (\n    <Route\n      {...rest}\n      render={() =>\n        getUser() ? (\n          <Redirect\n            to={{\n              pathname: \"/\"\n            }}\n          />\n        ) : (\n          children\n        )\n      }\n    />\n  );\n}\n\nfunction PrivateRoute({ children, ...rest }: any) {\n  return (\n    <Route\n      {...rest}\n      render={() =>\n        getUser() ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\"\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}